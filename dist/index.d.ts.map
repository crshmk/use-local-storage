{"mappings":"AEiDA;;;;GAIG;AACH,QAAA,MAAM,eAAe,GAAI,CAAC,EAAE,EAAE,SAAS,QAAQ,MAAM,EAAE;cAQzC,MAAM;gBACJ,MAAM,SAAS,CAAC;gBAnBb,MAAM;CAsBxB,CAAA;AAED,eAAe,eAAe,CAAA","sources":["src/src/emitStorageEvent.ts","src/src/onReceiveStorageEvent.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,"import { useEffect } from 'react'\nimport parse from 'unstring'\nimport emitStorageEvent from './emitStorageEvent'\nimport onReceiveStorageEvent from './onReceiveStorageEvent'\n\nconst stringify = <T>(value: T) => {\n  try {\n    const stringifiedValue = JSON.stringify(value)\n    return stringifiedValue\n  } catch(e) {\n    return JSON.stringify({})\n  }\n}\n\n/**\n * Set an item in localStorage\n * \n * Emit teh update to other tabs \n * \n * @param k string item key \n * @param v parsed item value \n */\nconst update = <T>(k: string, v: T) => {\n  const stringifiedValue = stringify<T>(v)\n  localStorage.setItem(k, stringifiedValue)\n  emitStorageEvent(k, stringifiedValue)\n}\n\n/**\n * Read an item from localStorage\n * \n * @param k localStorage key\n * @returns parsed item value \n */\nconst read = <T>(k: string): T => {\n  const stringifiedValue = localStorage.getItem(k) || ''\n  return parse(stringifiedValue)\n}\n\n/**\n * Remove an item from localStorage\n * \n * @param k localStorage key \n */\nconst remove = (k: string) => {\n  localStorage.removeItem(k)\n  emitStorageEvent(k, '')\n}\n\n/**\n * Interact with localStorage \n * \n * Emit storage events to other tabs\n */\nconst useLocalStorage = <T, Cb extends Function>(cb: Cb) => {\n  useEffect(() => {\n    const receieveEvent = onReceiveStorageEvent<T>(cb)\n    window.addEventListener(\"storage\", receieveEvent)\n    return () => window.removeEventListener(\"storage\", receieveEvent)\n  }, [])\n\n  return {\n    read: (k: string) => read<T>(k),\n    update: (k: string, value: T) => update<T>(k, value),\n    remove\n  }\n}\n\nexport default useLocalStorage"],"names":[],"version":3,"file":"index.d.ts.map"}