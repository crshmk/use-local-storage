{"mappings":";AMQA;;;;GAIG;AACH,QAAA,MAAM,eAAe,GAAI,aAAa,SAAS,mBAAmB,aAAa,MAAM,YAAY,QAAQ;IAUpG;;;;;;;;;;;;;;;;;;;;MAoBE;;;;;IAGH;;;;;;;;;;;;;;;;;;;;OAoBG;;;;;IAEH;;;;;;;;;;;;;;;;OAgBG;;;;;CAGN,CAAA;AAED,eAAe,eAAe,CAAA","sources":["src/src/receiveStorageEvent.ts","src/src/crud/isAbsent.ts","src/src/crud/read.ts","src/src/emitStorageEvent.ts","src/src/crud/update.ts","src/src/crud/unset.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,"import { useEffect } from 'react'\n\nimport receiveStorageEvent from './receiveStorageEvent'\n\nimport read from './crud/read'\nimport unset from './crud/unset'\nimport update from './crud/update'\n\n/**\n * Interact with namespaced localStorage \n * \n * Emit storage events to other tabs\n */\nconst useLocalStorage = <NamespaceType extends ParsedObjectOrArray>(namespace: string, eventCb?: Function) => {\n\n  useEffect(() => {\n    const onStore = receiveStorageEvent(eventCb)\n    window.addEventListener('storage', onStore)\n\n    return () => window.removeEventListener('storage', onStore)\n  }, [])\n\n  return {\n     /**\n     * Read a namespace in localStorage or a nested value at that namespace\n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to nested prop \n     * @returns value in localStorage at path \n     * \n     * @example \n     *   get the value at localStorage.user.preferences.isDarkMode\n     *  ```\n     *   const userStorage = useLocalStorage('user') \n     *  \n     *   userStorage.read<boolean>(['preferences', 'isDarkMode'])\n     * ```\n     * \n     * get the entire user \n     * ```\n     *   userStorage.read()\n     * ```\n     *   \n     */\n    read: read<NamespaceType>(namespace), //as <NamespaceType>(namespace: any) => <ValueType>(pathToProp?: (string | number)[]) => NamespaceType | ValueType | undefined,\n     \n    /**\n     * Set a namespace in localStorage or a nested value at that namespace\n     * \n     * Emit the update to other tabs \n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to set nested prop, or undefined to set namespace\n     * @return void \n     * @example \n     *   set `user.preferences.isDarkMode`\n     * ```\n     *   const userStorage = useLocalStorage<User>('user') \n     * \n     *   userStorage.update<boolean>(['preferences', 'isDarkMode'], true)\n     * ```\n     * update entire user \n     * ```\n     *   userStorage.update<User>(newUser)\n     * ```\n     * \n     */\n    update: update<NamespaceType>(namespace),\n    /**\n     * Remove a namespace from localStorage or a nested value at that namespace\n     * \n     * @param {(string | number)[] | undefined} path Ramda Path to nested prop  \n     * @example \n     * remove preferences from storage\n     * ```\n     *   const userStorage = useLocalStorage<User>('user') \n     * \n     *   userStorage.unset(['preferences', 'isDarkMode'])\n     * ```\n     * remove the entire user from storage \n     * ```\n     *   userStorage.unset()\n     * ```\n     * \n     */\n    unset: unset(namespace)\n  }\n}\n\nexport default useLocalStorage\n"],"names":[],"version":3,"file":"index.d.ts.map"}