{"mappings":"AIMA;;;;;;;GAOG;AACH,QAAA,MAAM,eAAe,GAAI,CAAC,OAAO,MAAM,gBAAgB,CAAC,KAAG,CAAC,CAAC,EAAE,MAAM,QAAQ,CAAC,MAAM,cAAc,CAAC,CAAC,CAAC,CAAC,CAerG,CAAA;AAED,eAAe,eAAe,CAAA","sources":["src/src/initializeFromStorage.ts","src/src/onReceiveStorageEvent.ts","src/src/emitStorageEvent.ts","src/src/setAndEmitValue.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,"import { useEffect, useState } from 'react'\n\nimport initializeFromStorage from './initializeFromStorage'\nimport onReceiveStorageEvent from './onReceiveStorageEvent'\nimport setAndEmitValue from './setAndEmitValue'\n\n/**\n * React hook to interact with localStorage \n * - Emits / receives storage events to / from other tabs \n * \n * @param key string \n * @param defaultValue T\n * @return [value ,setValue]\n */\nconst useLocalStorage = <T>(key: string, defaultValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {\n\n  const [value, setValue] = useState<T>(initializeFromStorage<T>(key, defaultValue))\n\n  useEffect(() => {\n    setAndEmitValue<T>(key, value)\n  }, [value])\n  \n  useEffect(() => {\n    const onSetStorage = onReceiveStorageEvent(setValue, defaultValue)\n    window.addEventListener(\"storage\", onSetStorage)\n    return () => window.removeEventListener(\"storage\", onSetStorage)\n  }, [key])\n\n  return [value, setValue]\n}\n\nexport default useLocalStorage"],"names":[],"version":3,"file":"index.d.ts.map"}