{"mappings":"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","sources":["src/receiveStorageEvent.ts","src/crud/read.js","src/crud/isAbsent.js","src/crud/unset.js","src/emitStorageEvent.ts","src/crud/update.js","src/index.js"],"sourcesContent":["import parse from 'unstring'\n\n/**\n * Update the state of this tab when another tab emits a storage event\n * \n * @param cb callback handed the parsed value of the namespace\n * @param defaultValue T\n * @returns void\n */\nconst receiveStorageEvent = cb => e => {\n  if(typeof cb !== 'function') return \n   \n  if(!e.newValue) {\n    return \n  }  \n\n  const newValue = parse(e.newValue)\n  if (newValue !== undefined) {\n    cb(newValue)\n  }\n}\n\nexport default receiveStorageEvent","import parse from 'unstring'\nimport isAbsent from './isAbsent'\nimport { path } from 'ramda'\n\n/**\n * Read an namespace in localStorage or a nested value at that namespace\n * \n * @param {string} namespace root key of localStorage\n * @param {unknown} value parsed item value \n * @param {(string | number)[] | undefined} path Ramda Path to nested prop \n */\nconst read = namespace => pathToProp => {\n  const stringifiedNamespace = localStorage.getItem(namespace) || ''\n  if(isAbsent(stringifiedNamespace)) return undefined\n  const parsedNamespace = parse(stringifiedNamespace)\n  return isAbsent(pathToProp) ? parsedNamespace : path(pathToProp, parsedNamespace)\n}\n\nexport default read","import { \n  anyPass, \n  isEmpty, \n  isNil\n} from 'ramda'\n\nexport default anyPass([isEmpty, isNil])\n","import emitStorageEvent from '../emitStorageEvent'\nimport read from './read'\nimport update from './update'\n\nimport isAbsent from './isAbsent'\nimport { dissocPath } from 'ramda'\n\n/**\n * Remove a namespace from localStorage or a nested value at that namespace\n * \n * @param {string} namespace root key of localStorage\n * @param {(string | number)[] | undefined} path Ramda Path to nested prop  \n */\nconst unset = namespace => pathToProp => {\n  if(isAbsent(pathToProp)) {\n    localStorage.removeItem(namespace)\n    emitStorageEvent(namespace, null)\n    return \n  }\n  const namespaceValue = read(namespace)()\n  const newNamespaceValue = dissocPath(pathToProp, namespaceValue)\n  update(namespace)(newNamespaceValue)\n}\n\nexport default unset","const emitStorageEvent = (key, stringifiedValue) => {\n  const config = {\n    storageArea: window.localStorage,\n    url: window.location.href,\n    key,\n    newValue: stringifiedValue\n  }\n  \n  const storageEvent = new StorageEvent(\"storage\", config)\n  window.dispatchEvent(storageEvent)\n}\n\nexport default emitStorageEvent","import emitStorageEvent from '../emitStorageEvent'\nimport read from './read'\n\nimport { isNil, lensPath, set } from 'ramda'\n\nconst stringify = value => {\n  try {\n    const stringifiedValue = JSON.stringify(value)\n    return stringifiedValue\n  } catch(e) {\n    return undefined\n  }\n}\n\n/**\n * Set an namespace in localStorage or a nested value at that namespace\n * \n * Emit the update to other tabs \n * \n * @param {string} namespace root key of localStorage\n * @param {unknown} value parsed item value \n * @param {(string | number)[] | undefined} path Ramda Path to nested prop \n */\nconst update = namespace => (value, path) => {\n  const currentNamespace = read(namespace)()\n  const updatedNamespaceValue = isNil(path) ? value : set(lensPath(path), value, currentNamespace)\n  if(!updatedNamespaceValue) return \n  const stringifiedNamespace = stringify(updatedNamespaceValue)\n  localStorage.setItem(namespace, stringifiedNamespace)\n  emitStorageEvent(namespace, stringifiedNamespace)\n}\n\nexport default update","import { useEffect } from 'react'\n\nimport receiveStorageEvent from './receiveStorageEvent'\n\nimport read from './crud/read'\nimport unset from './crud/unset'\nimport update from './crud/update'\n\n/**\n * Interact with namespaced localStorage \n * \n * Emit storage events to other tabs\n */\nconst useLocalStorage = (namespace, eventCb) => {\n\n  useEffect(() => {\n    const onStore = receiveStorageEvent(eventCb)\n    window.addEventListener(\"storage\", onStore)\n\n    return () => window.removeEventListener(\"storage\", onStore)\n  }, [])\n\n  return {\n     /**\n     * Read a namespace in localStorage or a nested value at that namespace\n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to nested prop \n     */\n    read: read(namespace),\n     /**\n     * Set a namespace in localStorage or a nested value at that namespace\n     * \n     * Emit the update to other tabs \n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to set nested prop, or undefined to set namespace\n     */\n    update: update(namespace),\n    /**\n     * Remove a namespace from localStorage or a nested value at that namespace\n     * \n     * @param {(string | number)[] | undefined} path Ramda Path to nested prop  \n     */\n    unset: unset(namespace)\n  }\n}\n\nmodule.exports = useLocalStorage"],"names":["_unstring","_interopRequireDefault","require","e","__esModule","receiveStorageEvent","cb","newValue","parse","undefined","_default","exports","_isAbsent","_ramda","read","namespace","pathToProp","stringifiedNamespace","localStorage","getItem","isAbsent","parsedNamespace","path","anyPass","isEmpty","isNil","_emitStorageEvent","_read","_update","unset","removeItem","emitStorageEvent","namespaceValue","newNamespaceValue","dissocPath","update","key","stringifiedValue","config","storageArea","window","url","location","href","storageEvent","StorageEvent","dispatchEvent","stringify","value","JSON","currentNamespace","updatedNamespaceValue","set","lensPath","setItem","_react","_receiveStorageEvent","_unset","useLocalStorage","eventCb","useEffect","onStore","addEventListener","removeEventListener","module"],"version":3,"file":"index.js.map"}