{"mappings":";;;;;;;;;;;ACAA;;;;;;;AAOA,GAEA,MAAM,yCAAmB,CAAC,KAAK;IAC7B,MAAM,SAAS;QACb,aAAa,OAAO,YAAY;QAChC,KAAK,OAAO,QAAQ,CAAC,IAAI;aACzB;QACA,UAAU;IACZ;IAEA,MAAM,eAAe,IAAI,aAAa,WAAW;IACjD,OAAO,aAAa,CAAC;AACvB;IAEA,2CAAe;;;;ACnBf;;;;;;CAMC,GACD,MAAM,4CAAsB,CAAA,KAAM,CAAA;QAEhC,IAAG,CAAC,EAAE,QAAQ,EACZ;QAGF,MAAM,WAAW,CAAA,GAAA,yCAAI,EAAE,EAAE,QAAQ;QACjC,GAAG;IACL;IAEA,2CAAe;;;AFJf,MAAM,iCAAW,CAAA,GAAA,oBAAM,EAAE;IAAC,CAAA,GAAA,oBAAM;IAAG,CAAA,GAAA,kBAAI;CAAE;AACzC,MAAM,kCAAY,CAAA;IAChB,IAAI;QACF,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,OAAO;IACT,EAAE,OAAM,GAAG;QACT,OAAO;IACT;AACF;AAEA;;;;;;;;CAQC,GACD,MAAM,+BAAS,CAAA,YAAa,CAAC,OAAO;QAClC,MAAM,mBAAmB,2BAAK;QAC9B,MAAM,wBAAwB,CAAA,GAAA,kBAAI,EAAE,QAAQ,QAAQ,CAAA,GAAA,gBAAE,EAAE,CAAA,GAAA,qBAAO,EAAE,OAAO,OAAO;QAC/E,MAAM,uBAAuB,gCAAU;QACvC,aAAa,OAAO,CAAC,WAAW;QAChC,CAAA,GAAA,wCAAe,EAAE,WAAW;IAC9B;AAEA;;;;;CAKC,GAGD;;;;;;CAMC,GACD,MAAM,6BAAO,CAAA,YAAa,CAAA;QACxB,MAAM,uBAAuB,aAAa,OAAO,CAAC,cAAc;QAChE,IAAG,+BAAS,uBAAuB,OAAO;QAC1C,MAAM,kBAAkB,CAAA,GAAA,yCAAI,EAAE;QAC9B,OAAO,+BAAS,cAAc,kBAAkB,CAAA,GAAA,iBAAG,EAAE,YAAY;IACnE;AACA;;;;;CAKC,GACD,MAAM,8BAAQ,CAAA,YAAa,CAAA;QACzB,IAAG,+BAAS,aAAa;YACvB,aAAa,UAAU,CAAC;YACxB,CAAA,GAAA,wCAAe,EAAE,WAAW;YAC5B;QACF;QACA,MAAM,iBAAiB,2BAAK;QAC5B,MAAM,oBAAoB,CAAA,GAAA,uBAAS,EAAE,YAAY;QACjD,6BAAO,WAAW;IACpB;AAEA;;;;CAIC,GACD,MAAM,wCAAkB,CAAC,WAAW;IAClC,CAAA,GAAA,sBAAQ,EAAE;QACT,MAAM,UAAU,CAAA,GAAA,wCAAkB,EAAE;QACpC,OAAO,gBAAgB,CAAC,WAAW;QACpC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACnD,GAAG,EAAE;IAEL,OAAO;QACJ;;;;;KAKA,GACD,MAAM,2BAAK;QACV;;;;;;;KAOA,GACD,QAAQ,6BAAO;QACf;;;;KAIC,GACD,OAAO,4BAAM;IACf;AACF;AAEA,iBAAiB","sources":["src/index.js","src/emitStorageEvent.ts","src/receiveStorageEvent.ts"],"sourcesContent":["import { useEffect } from 'react'\n\nimport parse from 'unstring'\nimport { \n  anyPass, \n  dissocPath, \n  isEmpty, \n  isNil, \n  lensPath, \n  path, \n  set \n} from 'ramda'\nimport emitStorageEvent from './emitStorageEvent'\nimport receiveStorageEvent from './receiveStorageEvent'\n\nconst isAbsent = anyPass([isEmpty, isNil])\nconst stringify = value => {\n  try {\n    const stringifiedValue = JSON.stringify(value)\n    return stringifiedValue\n  } catch(e) {\n    return undefined\n  }\n}\n\n/**\n * Set an namespace in localStorage or a nested value at that namespace\n * \n * Emit the update to other tabs \n * \n * @param {string} namespace root key of localStorage\n * @param {unknown} value parsed item value \n * @param {(string | number)[] | undefined} path Ramda Path to nested prop \n */\nconst update = namespace => (value, path) => {\n  const currentNamespace = read(namespace)()\n  const updatedNamespaceValue = isNil(path) ? value : set(lensPath(path), value, currentNamespace)\n  const stringifiedNamespace = stringify(updatedNamespaceValue)\n  localStorage.setItem(namespace, stringifiedNamespace)\n  emitStorageEvent(namespace, stringifiedNamespace)\n}\n\n/**\n * Read a namespace from localStorage or a nested value at that namespace\n * \n * @param k localStorage key\n * @returns parsed item value \n */\n\n\n/**\n * Read an namespace in localStorage or a nested value at that namespace\n * \n * @param {string} namespace root key of localStorage\n * @param {unknown} value parsed item value \n * @param {(string | number)[] | undefined} path Ramda Path to nested prop \n */\nconst read = namespace => pathToProp => {\n  const stringifiedNamespace = localStorage.getItem(namespace) || ''\n  if(isAbsent(stringifiedNamespace)) return undefined\n  const parsedNamespace = parse(stringifiedNamespace)\n  return isAbsent(pathToProp) ? parsedNamespace : path(pathToProp, parsedNamespace)\n}\n/**\n * Remove a namespace from localStorage or a nested value at that namespace\n * \n * @param {string} namespace root key of localStorage\n * @param {(string | number)[] | undefined} path Ramda Path to nested prop  \n */\nconst unset = namespace => pathToProp => {\n  if(isAbsent(pathToProp)) {\n    localStorage.removeItem(namespace)\n    emitStorageEvent(namespace, null)\n    return \n  }\n  const namespaceValue = read(namespace)()\n  const newNamespaceValue = dissocPath(pathToProp, namespaceValue)\n  update(namespace)(newNamespaceValue)\n}\n\n/**\n * Interact with localStorage \n * \n * Emit storage events to other tabs\n */\nconst useLocalStorage = (namespace, eventCb) => {\n  useEffect(() => {\n   const onStore = receiveStorageEvent(eventCb)\n   window.addEventListener(\"storage\", onStore)\n  return () => window.removeEventListener(\"storage\", onStore)\n  }, [])\n\n  return {\n     /**\n     * Read a namespace in localStorage or a nested value at that namespace\n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to nested prop \n     */\n    read: read(namespace),\n     /**\n     * Set a namespace in localStorage or a nested value at that namespace\n     * \n     * Emit the update to other tabs \n     * \n     * @param {unknown} value parsed item value \n     * @param {(string | number)[]} path Ramda Path to set nested prop, or undefined to set namespace\n     */\n    update: update(namespace),\n    /**\n     * Remove a namespace from localStorage or a nested value at that namespace\n     * \n     * @param {(string | number)[] | undefined} path Ramda Path to nested prop  \n     */\n    unset: unset(namespace)\n  }\n}\n\nmodule.exports = useLocalStorage","/*\ntype StorageEventConfig = {\n  storageArea: Storage \n  url: string \n  key: string \n  newValue?: string \n}\n*/\n\nconst emitStorageEvent = (key, stringifiedValue) => {\n  const config = {\n    storageArea: window.localStorage,\n    url: window.location.href,\n    key,\n    newValue: stringifiedValue\n  }\n  \n  const storageEvent = new StorageEvent(\"storage\", config)\n  window.dispatchEvent(storageEvent)\n}\n\nexport default emitStorageEvent","import parse from 'unstring'\n\n/**\n * Update the state of this tab when another tab emits a storage event\n * \n * @param cb callback handed the parsed value of the namespace\n * @param defaultValue T\n * @returns void\n */\nconst receiveStorageEvent = cb => e => {\n   \n  if(!e.newValue) {\n    return \n  }  \n\n  const newValue = parse(e.newValue)\n  cb(newValue)\n}\n\nexport default receiveStorageEvent"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}