{"mappings":";;;;;;;;;;;;;;;;;;;;;ACOA,MAAM,yCAAmB,CAAC,KAAa;IACrC,MAAM,SAA6B;QACjC,aAAa,OAAO,YAAY;QAChC,KAAK,OAAO,QAAQ,CAAC,IAAI;aACzB;IACD;IAED,IAAG,qBAAqB,WACtB,OAAO,QAAQ,GAAG;IAGpB,MAAM,eAAe,IAAI,aAAa,WAAW;IACjD,OAAO,aAAa,CAAC;AACvB;IAEA,2CAAe;;;;AClBf;;;;;;CAMG,GACH,MAAM,8CAAwB,CAAI;IAGhC,IAAG,CAAC,EAAE,QAAQ,EACZ;IAGF,MAAM,WAAc,CAAA,GAAA,yCAAA,EAAM,EAAE,QAAQ;IAEpC,QAAQ,GAAG,CACT,GACA;IAIF,yCAAyC;IACzC;AAEF;IAEA,2CAAe;;;AF1Bf,MAAM,kCAAY,CAAI;IACpB,IAAI;QACF,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,OAAO;IACT,EAAE,OAAM,GAAG;QACT,OAAO,KAAK,SAAS,CAAC,CAAA;IACxB;AACF;AAEA;;;;;;;CAOG,GACH,MAAM,+BAAS,CAAI,GAAW;IAC5B,MAAM,mBAAmB,gCAAa;IACtC,aAAa,OAAO,CAAC,GAAG;IACxB,CAAA,GAAA,wCAAA,EAAiB,GAAG;AACtB;AAEA;;;;;CAKG,GACH,MAAM,6BAAO,CAAI;IACf,MAAM,mBAAmB,aAAa,OAAO,CAAC,MAAM;IACpD,OAAO,CAAA,GAAA,yCAAA,EAAM;AACf;AAEA;;;;CAIG,GACH,MAAM,+BAAS,CAAC;IACd,aAAa,UAAU,CAAC;IACxB,CAAA,GAAA,wCAAA,EAAiB,GAAG;AACtB;AAEA;;;;CAIG,GACH,MAAM,wCAAkB,CAAyB;IAC/C,CAAA,GAAA,sBAAA,EAAU;QACR,MAAM,gBAAgB,CAAA,GAAA,wCAAA,EAAyB;QAC/C,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACrD,GAAG,EAAE;IAEL,OAAO;QACL,MAAM,CAAC,IAAc,2BAAQ;QAC7B,QAAQ,CAAC,GAAW,QAAa,6BAAU,GAAG;gBAC9C;IACD;AACH;IAEA,2CAAe","sources":["src/index.ts","src/emitStorageEvent.ts","src/onReceiveStorageEvent.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport parse from 'unstring'\nimport emitStorageEvent from './emitStorageEvent'\nimport onReceiveStorageEvent from './onReceiveStorageEvent'\n\nconst stringify = <T>(value: T) => {\n  try {\n    const stringifiedValue = JSON.stringify(value)\n    return stringifiedValue\n  } catch(e) {\n    return JSON.stringify({})\n  }\n}\n\n/**\n * Set an item in localStorage\n * \n * Emit teh update to other tabs \n * \n * @param k string item key \n * @param v parsed item value \n */\nconst update = <T>(k: string, v: T) => {\n  const stringifiedValue = stringify<T>(v)\n  localStorage.setItem(k, stringifiedValue)\n  emitStorageEvent(k, stringifiedValue)\n}\n\n/**\n * Read an item from localStorage\n * \n * @param k localStorage key\n * @returns parsed item value \n */\nconst read = <T>(k: string): T => {\n  const stringifiedValue = localStorage.getItem(k) || ''\n  return parse(stringifiedValue)\n}\n\n/**\n * Remove an item from localStorage\n * \n * @param k localStorage key \n */\nconst remove = (k: string) => {\n  localStorage.removeItem(k)\n  emitStorageEvent(k, '')\n}\n\n/**\n * Interact with localStorage \n * \n * Emit storage events to other tabs\n */\nconst useLocalStorage = <T, Cb extends Function>(cb: Cb) => {\n  useEffect(() => {\n    const receieveEvent = onReceiveStorageEvent<T>(cb)\n    window.addEventListener(\"storage\", receieveEvent)\n    return () => window.removeEventListener(\"storage\", receieveEvent)\n  }, [])\n\n  return {\n    read: (k: string) => read<T>(k),\n    update: (k: string, value: T) => update<T>(k, value),\n    remove\n  }\n}\n\nexport default useLocalStorage","type StorageEventConfig = {\n  storageArea: Storage \n  url: string \n  key: string \n  newValue?: string \n}\n\nconst emitStorageEvent = (key: string, stringifiedValue?: string) => {\n  const config: StorageEventConfig = {\n    storageArea: window.localStorage,\n    url: window.location.href,\n    key\n  }\n  \n  if(stringifiedValue !== undefined) {\n    config.newValue = stringifiedValue\n  }\n\n  const storageEvent = new StorageEvent(\"storage\", config)\n  window.dispatchEvent(storageEvent)\n}\n\nexport default emitStorageEvent","import parse from 'unstring'\n\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\n\n/**\n * Update the state of this tab when another tab emits a storage event\n * \n * @param setValue state setter\n * @param defaultValue T\n * @returns void\n */\nconst onReceiveStorageEvent = <T>(e: StorageEvent) => {\n   \n\n  if(!e.newValue) {\n    return \n  }  \n\n  const newValue: T = parse(e.newValue)\n\n  console.log(\n    e, \n    newValue \n  );\n  \n\n  //console.log('received event', newValue)\n  return \n  \n}\n\nexport default onReceiveStorageEvent"],"names":[],"version":3,"file":"index.js.map"}