{"mappings":";;;;;;;;;;;;;;;;;;;;;ACIA;;;;;;CAMG,GACH,MAAM,8CAAwB,CAAI,UAA0B,eAAoB,CAAC;QAE/E,IAAG,CAAC,EAAE,QAAQ,EAAE;YACd,SAAS;YACT;QACF;QAEA,MAAM,WAAc,CAAA,GAAA,yCAAA,EAAM,EAAE,QAAQ;QACpC,SAAS;IACX;IAEA,2CAAe;;;ACnBf,IAAI,oCAAuB;AAE3B;;;;;;;CAOG,GACH,MAAM,wCAAkB,CAAI,KAAa;IACvC,IAAG,sCAAgB,OAAO;QACxB,aAAa,OAAO,CAAC,KAAK;QAC1B,oCAAc;IACd,yCAAyC;IAC3C;AAEF;IAEA,2CAAe;;;;AFbf;;;;;;;CAOG,GACH,MAAM,wCAAkB,CAAI,KAAa;IAEvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qBAAA,EAAY;IACtC,MAAM,OAAO,CAAA,GAAA,mBAAA,EAAe;IAE5B,CAAA,GAAA,sBAAA,EAAU;QACR,MAAM,cAAsB,OAAO,YAAY,CAAC,OAAO,CAAC;QACxD,MAAM,cAAc,CAAA,GAAA,yCAAA,EAAM;QAC1B,MAAM,WAAW,eAAe;QAChC,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,aAAa,OAAO,CAAC,KAAK;QAC1B,CAAA,GAAA,wCAAA,EAAmB,KAAK;QACxB,KAAK,OAAO,GAAG;IACjB,GAAG,EAAE;IAEL,CAAA,GAAA,sBAAA,EAAU;QACR,MAAM,mBAAmB,KAAK,SAAS,CAAC;QACxC,IAAG,qBAAqB,KAAK,OAAO,EAAE;QACtC,CAAA,GAAA,wCAAA,EAAmB,KAAK;QACxB,KAAK,OAAO,GAAG;IACjB,GAAG;QAAC;KAAM;IAEV,CAAA,GAAA,sBAAA,EAAU;QACR,MAAM,eAAe,CAAA,GAAA,wCAAA,EAAsB,UAAU;QACrD,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACrD,GAAG;QAAC;KAAI;IAER,OAAO;QAAC;QAAO;KAAS;AAC1B;IAEA,2CAAe","sources":["src/index.ts","src/onReceiveStorageEvent.ts","src/setAndEmitValue.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nimport initializeFromStorage from './initializeFromStorage'\nimport onReceiveStorageEvent from './onReceiveStorageEvent'\nimport setAndEmitValue from './setAndEmitValue'\n\nimport stringify from 'pretty-format'\nimport parse from 'unstring'\n\n/**\n * React hook to interact with localStorage \n * - Emits / receives storage events to / from other tabs \n * \n * @param key string \n * @param defaultValue T\n * @return [value ,setValue]\n */\nconst useLocalStorage = <T>(key: string, defaultValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {\n\n  const [value, setValue] = useState<T>(defaultValue)\n  const prev = useRef<string>(null)\n\n  useEffect(() => {\n    const storedValue: string = window.localStorage.getItem(key) as string \n    const parsedValue = parse(storedValue)\n    const newValue = parsedValue || defaultValue \n    const stringifiedValue = JSON.stringify(newValue)\n    localStorage.setItem(key, stringifiedValue)\n    setAndEmitValue<T>(key, stringifiedValue)\n    prev.current = stringifiedValue\n  }, [])\n\n  useEffect(() => {\n    const stringifiedValue = JSON.stringify(value) \n    if(stringifiedValue === prev.current) return    \n    setAndEmitValue<T>(key, stringifiedValue)\n    prev.current = stringifiedValue\n  }, [value])\n  \n  useEffect(() => {\n    const onSetStorage = onReceiveStorageEvent(setValue, defaultValue)\n    window.addEventListener(\"storage\", onSetStorage)\n    return () => window.removeEventListener(\"storage\", onSetStorage)\n  }, [key])\n\n  return [value, setValue]\n}\n\nexport default useLocalStorage","import parse from 'unstring'\n\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\n\n/**\n * Update the state of this tab when another tab emits a storage event\n * \n * @param setValue state setter\n * @param defaultValue T\n * @returns void\n */\nconst onReceiveStorageEvent = <T>(setValue: StateSetter<T>, defaultValue: T) => (e: StorageEvent) => {\n\n  if(!e.newValue) {\n    setValue(defaultValue)\n    return \n  }\n\n  const newValue: T = parse(e.newValue)\n  setValue(newValue)\n}\n\nexport default onReceiveStorageEvent","import emitStorageEvent from './emitStorageEvent'\nimport stringify from 'pretty-format'\n\nlet cachedValue: unknown = undefined\n\n/**\n * Set the value in the localStorage of this tab\n * \n * Emit the value to be set in other tabs\n * \n * @param key string\n * @param value T\n */\nconst setAndEmitValue = <T>(key: string, value: string) => {\n  if(cachedValue !== value) {\n    localStorage.setItem(key, value)\n    cachedValue = value\n    //emitStorageEvent(key, stringifiedValue)\n  }\n\n}\n\nexport default setAndEmitValue"],"names":[],"version":3,"file":"index.js.map"}